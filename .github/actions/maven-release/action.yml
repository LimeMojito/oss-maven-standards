name: "Lime Maven Release"
description: "Performs a build and maven deployment similar to a maven release with commits pushed at the end."
inputs:
  aws-region:
    description: 'AWS Region name'
    required: true
  role-to-assume:
    description: 'AWS Role ARN to run with'
    required: true
  code-signing-key:
    description: 'Code signing GPG key data'
    required: true
  code-signing-key-name:
    description: 'Code signing GPG key name'
  code-signing-passphrase:
    description: 'Code signing GPG passphrase'
    required: true
  git-access-key:
    description: 'Github access key (SSH)'
    required: true
  git-signing-key:
    description: 'Github Commit signing GPG key data'
    required: true
  extra-mvn-options:
    description: 'Extra maven command line options'
    required: false

runs:
  using: composite
  steps:
    - name: Import GPG key for Version Update
      uses: crazy-max/ghaction-import-gpg@v6
      with:
        gpg_private_key: ${{ inputs.git-signing-key }}
        git_committer_email: "build@limemojito.com"
        git_committer_name: "Lime Build Agent"
        git_user_signingkey: true
        git_push_gpgsign: false
        git_tag_gpgsign: true
        git_commit_gpgsign: true
        git_config_global: true

    - id: git_release_version
      name: Increment Release Version
      shell: bash
      run: |
        mvn -B -Dstyle.color=always build-helper:parse-version versions:set -DprocessAllModules=true -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.incrementalVersion} versions:commit
        projectVersion=$(mvn -B help:evaluate -Dexpression=project.version -q -DforceStdout )
        git add .
        git commit -S -m "[Release] updated version in pom.xml"
        tagName="$projectVersion-release-build-${{github.run_number}}"
        echo "Tagging repository with [$tagName]"
        git tag -a $tagName -m "[Release] Release Tag"        
        echo "lime-release-version=$tagName" >> "$GITHUB_OUTPUT"

    - name: Increment development version
      shell: bash
      run: |
        mvn -B -Dstyle.color=always build-helper:parse-version versions:set -DprocessAllModules=true -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion}-SNAPSHOT versions:commit
        echo "Adding version changes to git"
        git add .
        git commit -S -m "[Development] updated development version in pom.xml"

    - name: Perform Release Build with Maven
      shell: bash
      run: |
        echo "Checking out ${{steps.git_release_version.outputs.lime-release-version}}"
        git checkout ${{steps.git_release_version.outputs.lime-release-version}}
        export MAVEN_GPG_PASSPHRASE="${{ inputs.code-signing-passphrase }}"
        # deploy to OSSRH
        mvn -B ${{ inputs.extra-mvn-options }} -Dstyle.color=always -Prelease -Dbuild.number=${{github.run_number}} -Dgpg.keyname='${{inputs.code-signing-key-name}}' deploy

    - name: Upload Docker logs
      uses: actions/upload-artifact@v4
      with:
        name: docker-logs
        path: |
          target/docker-logs/
          **/target/docker-logs

    - name: Push version and tag to repository
      shell: bash
      run: |
        defaultBranch=$(git remote show origin | grep "HEAD branch" | sed 's/.*: //')
        echo "Checking out $defaultBranch"
        git checkout $defaultBranch
        echo "Pushing version and tag changes"
        git push
        git push origin tag ${{steps.git_release_version.outputs.lime-release-version}}
