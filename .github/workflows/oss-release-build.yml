name: OSS Release Build

on:
  workflow_call:

concurrency:
  # this should stop release and java build running on the same repo as we have one AWS account involved.
  group: ${{ github.repository }}

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Environment Setup
        uses: LimeMojito/oss-maven-standards/.github/actions/lime-env-setup@master
        with:
          aws-region: ${{ secrets.LIME_AWS_REGION }}
          role-to-assume: ${{ secrets.LIME_AWS_ROLE_ARN }}
          code-signing-key: ${{ secrets.LIME_SIGNING_KEY }}

      - name: Import GPG key for Version Update
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.LIME_BUILD_AGENT_GIT_SIGNING_KEY }}
          git_committer_email: "build@limemojito.com"
          git_committer_name: "Lime Build Agent"
          git_user_signingkey: true
          git_push_gpgsign: false
          git_tag_gpgsign: true
          git_commit_gpgsign: true
          git_config_global: true

      - name: Configure OSSRH Credentials
        id: maven_setup
        shell: bash
        run: |
          mkdir target
          # avoid commits using a standard ignore directory
          localSettings=target/local-mvn-settings.xml 
          echo '<?xml version="1.0" encoding="UTF-8"?>' > $localSettings
          echo '<settings>' >> $localSettings
          echo '<servers>' >> $localSettings
          echo '<server>' >> $localSettings
          echo '<id>ossrh</id>' >> $localSettings
          echo '<username>${{ secrets.LIME_OSSRH_ID }}</username>' >> $localSettings
          echo '<password>${{ secrets.LIME_OSSRH_KEY }}</password>' >> $localSettings
          echo '</server>' >> $localSettings
          echo '</servers>' >> $localSettings
          echo '</settings>' >> $localSettings
          
          echo "settings-file=$localSettings" >> "$GITHUB_OUTPUT"

      - id: git_setup
        name: Prepare Release Build with Maven
        shell: bash
        run: |
          # avoid commits using a standard ignore directory
          KEY_PATH=$PWD/target/git-commit-key
          echo '${{ secrets.LIME_BUILD_AGENT_GIT_KEY }}' > $KEY_PATH
          chmod 600 $KEY_PATH
          
          git config core.sshCommand "ssh -i $KEY_PATH"
          remote_url="$(git config --get remote.origin.url)"
          url="$(echo $remote_url | sed -r 's/https:\/\/github.com\/([^/]+)/git@github.com:\1/').git"  
          echo "Switched origin from $remote_url to $url"
          git remote set-url origin "$url"
          
          echo "lime-git-url=${url}" >> "$GITHUB_OUTPUT"
          echo "commit-key=${KEY_PATH}" >> "$GITHUB_OUTPUT"

      - id: git_release_version
        name: Increment Release Version
        shell: bash
        run: |
          mvn -B -Dstyle.color=always build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.incrementalVersion} versions:commit
          projectVersion=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout )
          git add .
          git commit -S -m "[Release] updated version in pom.xml"
          tagName="$projectVersion-${{github.run_number}}"
          git tag -a $tagName -m "[Release] Release Tag"
          
          echo "lime-release-version=$tagName" >> "$GITHUB_OUTPUT"

      - name: Increment development version
        shell: bash
        run: |
          mvn -B -Dstyle.color=always build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion}-SNAPSHOT versions:commit
          git add .
          git commit -S -m "[Development] updated development version in pom.xml"

      - name: Perform Release Build with Maven
        shell: bash
        run: |
          git checkout ${{steps.git_release_version.outputs.lime-release-version}}
          # deploy to OSSRH
          mvn -B --settings ${{steps.maven_setup.outputs.settings-file}} -Prelease -Dbuild.number=${{github.run_number}} -Dgpg.keyname='Lime Mojito Pty Ltd' deploy

      - name: Push version and tag to repository
        shell: bash
        run: |
          # Release builds are always on master.
          git checkout master
          git push
          git push origin tag ${{steps.git_release_version.outputs.lime-release-version}}

      - name: Remove Credentials
        shell: bash
        if: always()
        run: |
          rm -f ${{steps.maven_setup.outputs.settings-file}}
          rm -f ${{steps.git_setup.outputs.commit-key}}
